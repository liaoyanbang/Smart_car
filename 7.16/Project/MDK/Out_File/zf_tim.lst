C251 COMPILER V5.60.0,  zf_tim                                                             13/07/22  15:38:05  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE zf_tim
OBJECT MODULE PLACED IN .\Out_File\zf_tim.obj
COMPILER INVOKED BY: D:\Keil_v5\C251\BIN\C251.EXE ..\..\Libraries\seekfree_libraries\zf_tim.c XSMALL INTR2 WARNINGLEVEL(
                    -3) BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\COD
                    -E;..\USER\inc;..\USER\src;.\Out_File) DEBUG PRINT(.\Out_File\zf_tim.lst) TABS(2) OBJECT(.\Out_File\zf_tim.obj) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2           * COPYRIGHT NOTICE
    3           * Copyright (c) 2020,逐飞科技
    4           * All rights reserved.
    5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897(已满)  三群：824575535
    6           *
    7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
    8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
    9           *
   10           * @file          ctime
   11           * @company       成都逐飞科技有限公司
   12           * @author        逐飞科技(QQ790875685)
   13           * @version       查看doc内version文件 版本说明
   14           * @Software    MDK FOR C251 V5.60
   15           * @Target core   STC16F40K128
   16           * @Taobao      https://seekfree.taobao.com/
   17           * @date          2020-4-14
   18           ********************************************************************************************************
             -************/
   19          
   20          
   21          #include "zf_tim.h"
   22          #include "board.h"
   23          
   24          
   25          
   26          //-------------------------------------------------------------------------------------------------------
             -------------
   27          //  @brief      定时器初始化作为外部计数
   28          //  @param      tim_n           选择模块
   29          //  @return     void
   30          //  @since      v1.0
   31          //  Sample usage:               ctimer_count_init(CTIM0_P34);   //初始化定时器0，外部输入为P3.4引脚
   32          //  @note                       串口1使用定时器1作为波特率发生器，
   33          //                串口2使用定时器2作为波特率发生器，
   34          //                串口3使用定时器3作为波特率发生器，
   35          //                串口4使用定时器4作为波特率发生器，
   36          //                              STC16F仅有定时器0-定时器4，这5个定时器。
   37          //                编码器采集数据也需要定时器作为外部计数。
   38          //-------------------------------------------------------------------------------------------------------
             -------------
   39          void ctimer_count_init(CTIMN_enum tim_n)
   40          {
   41   1      
   42   1        switch(tim_n)
   43   1        {
   44   2          case CTIM0_P34:
   45   2          {
   46   3            TL0 = 0; 
   47   3            TH0 = 0; 
   48   3            TMOD |= 0x04; //外部计数模式
   49   3            TR0 = 1; //启动定时器
   50   3            break;
   51   3          }
   52   2          
   53   2          case CTIM1_P35:
C251 COMPILER V5.60.0,  zf_tim                                                             13/07/22  15:38:05  PAGE 2   

   54   2          {
   55   3            TL1 = 0x00;
   56   3            TH1 = 0x00;
   57   3            TMOD |= 0x40; // 外部计数模式
   58   3            TR1 = 1; // 启动定时器
   59   3            break;
   60   3          }
   61   2          
   62   2          case CTIM2_P12:
   63   2          {
   64   3            T2L = 0x00;
   65   3            T2H = 0x00;
   66   3            AUXR |= 0x18; // 设置外部计数模式并启动定时器
   67   3            break;
   68   3          }
   69   2          
   70   2          case CTIM3_P04:
   71   2          {
   72   3            T3L = 0; 
   73   3            T3H = 0;
   74   3            T4T3M |= 0x0c; // 设置外部计数模式并启动定时器
   75   3            break;
   76   3          }
   77   2          
   78   2          case CTIM4_P06:
   79   2          {
   80   3            T4L = 0;
   81   3            T4H = 0;
   82   3            T4T3M |= 0xc0; // 设置外部计数模式并启动定时器
   83   3            break;
   84   3          }
   85   2        
   86   2        } 
   87   1      } 
   88          
   89          //-------------------------------------------------------------------------------------------------------
             -------------
   90          //  @brief      获取计数数值
   91          //  @param      countch     计数通道号及引脚
   92          //  @return     uint32      返回计数值
   93          //  Sample usage:           num = ctimer_count_read(CTIM0_P34);     
   94          //-------------------------------------------------------------------------------------------------------
             -------------
   95          int16 ctimer_count_read(CTIMN_enum tim_n)
   96          {
   97   1        int16 dat = 0;
   98   1        
   99   1        switch(tim_n)
  100   1        {
  101   2          case CTIM0_P34:
  102   2          {
  103   3            if(P35)//编码器1计数A:P34  DIR:P35  
  104   3            {
  105   4              dat = (uint16)TH0 << 8;
  106   4              dat = ((uint8)TL0) | dat;
  107   4            }
  108   3            else   
  109   3            {
  110   4              dat = (uint16)TH0 << 8;
  111   4              dat = ((uint8)TL0) | dat;
  112   4              dat = 0-dat;
  113   4            }
  114   3            TR0 = 0;
  115   3            TH0 = 0;
  116   3            TL0 = 0;
  117   3            TR0 = 1;
C251 COMPILER V5.60.0,  zf_tim                                                             13/07/22  15:38:05  PAGE 3   

  118   3            break;
  119   3          }
  120   2      //    case CTIM1_P35:
  121   2      //    {
  122   2      //      dat = (uint16)TH1 << 8;
  123   2      //      dat = ((uint8)TL1) | dat;
  124   2      //      break;
  125   2      //    }
  126   2      //    case CTIM2_P12:
  127   2      //    {
  128   2      //      dat = (uint16)T2H << 8;
  129   2      //      dat = ((uint8)T2L) | dat;
  130   2      //      break;
  131   2      //    }
  132   2          case CTIM3_P04:  //P77
  133   2          {
  134   3            if(P77)//编码器2计数A:P04  DIR:P77  
  135   3            {
  136   4              dat = (uint16)T3H << 8;
  137   4              dat = ((uint8)T3L) | dat; 
  138   4            }
  139   3      
  140   3            else
  141   3            {
  142   4              dat = (uint16)T3H << 8;
  143   4              dat = ((uint8)T3L) | dat; 
  144   4              dat = 0-dat;
  145   4            }
  146   3            T4T3M &= ~(1<<3);
  147   3            T3H = 0;
  148   3            T3L = 0;
  149   3            T4T3M |= (1<<3);
  150   3            break;
  151   3          }
  152   2      //    case CTIM4_P06:
  153   2      //    {
  154   2      //      dat = (uint16)T4H << 8;
  155   2      //      dat = ((uint8)T4L) | dat;
  156   2      //      break;
  157   2      //    }
  158   2          
  159   2        }
  160   1        return dat;
  161   1      }
  162          
  163          
  164          //-------------------------------------------------------------------------------------------------------
             -------------
  165          //  @brief      清除计数数值
  166          //  @param      countch     计数通道号及引脚
  167          //  @return     void      
  168          //  Sample usage:           ctimer_count_clean(CTIM0_P34);     
  169          //-------------------------------------------------------------------------------------------------------
             -------------
  170          void ctimer_count_clean(CTIMN_enum tim_n)
  171          { 
  172   1        switch(tim_n)
  173   1        {
  174   2          case CTIM0_P34:
  175   2          {
  176   3            TR0 = 0;
  177   3            TH0 = 0;
  178   3            TL0 = 0;
  179   3            TR0 = 1;
  180   3            break;
  181   3          }
C251 COMPILER V5.60.0,  zf_tim                                                             13/07/22  15:38:05  PAGE 4   

  182   2          case CTIM1_P35:
  183   2          {
  184   3            TR1 = 0;
  185   3            TH1 = 0;
  186   3            TL1 = 0;
  187   3            TR1 = 1;
  188   3            break;
  189   3          }
  190   2          case CTIM2_P12:
  191   2          {
  192   3            AUXR &= ~(1<<4);
  193   3            T2H = 0;
  194   3            T2L = 0;
  195   3            AUXR |= 1<<4;
  196   3            break;
  197   3          }
  198   2          case CTIM3_P04:
  199   2          {
  200   3            T4T3M &= ~(1<<3);
  201   3            T3H = 0;
  202   3            T3L = 0;
  203   3            T4T3M |= (1<<3);
  204   3            break;
  205   3          }
  206   2          case CTIM4_P06:
  207   2          {
  208   3            T4T3M &= ~(1<<7);
  209   3            T4H = 0;
  210   3            T4L = 0;
  211   3            T4T3M |= (1<<7);
  212   3            break;
  213   3          }
  214   2        }
  215   1      }
  216          
  217          //-------------------------------------------------------------------------------------------------------
             -------------
  218          //  @brief      定时器周期中断
  219          //  @param      tim_n      定时器通道号
  220          //  @param      time_ms    时间(ms)
  221          //  @return     void      
  222          //  Sample usage:          pit_timer_ms(TIM_0, 10)
  223          //               使用定时器0做周期中断，时间10ms一次。
  224          //-------------------------------------------------------------------------------------------------------
             -------------
  225          void pit_timer_ms(TIMN_enum tim_n,uint16 time_ms)
  226          {
  227   1        uint16 temp;
  228   1        temp = (uint16)65536 - (uint16)(sys_clk / (12 * (1000 / time_ms)));
  229   1        
  230   1        if(TIM_0 == tim_n)
  231   1        {
  232   2          TMOD |= 0x00;   // 模式 0
  233   2          TL0 = temp;   
  234   2          TH0 = temp >> 8;
  235   2          TR0 = 1;    // 启动定时器
  236   2          ET0 = 1;    // 使能定时器中断
  237   2        }
  238   1        else if(TIM_1 == tim_n)
  239   1        {
  240   2          TMOD |= 0x00; // 模式 0
  241   2          TL1 = temp;   
  242   2          TH1 = temp >> 8;
  243   2          TR1 = 1; // 启动定时器
  244   2          ET1 = 1; // 使能定时器中断
  245   2        }
C251 COMPILER V5.60.0,  zf_tim                                                             13/07/22  15:38:05  PAGE 5   

  246   1        else if(TIM_2 == tim_n)
  247   1        {
  248   2          T2L = temp;   
  249   2          T2H = temp >> 8;
  250   2          AUXR |= 0x10; // 启动定时器
  251   2          IE2 |= 0x04; // 使能定时器中断
  252   2        }
  253   1        else if(TIM_3 == tim_n)
  254   1        {
  255   2          T3L = temp;   
  256   2          T3H = temp >> 8;
  257   2          T4T3M |= 0x08; // 启动定时器
  258   2          IE2 |= 0x20; // 使能定时器中断
  259   2        }
  260   1        else if(TIM_4 == tim_n)
  261   1        {
  262   2          T4L = temp;   
  263   2          T4H = temp >> 8;
  264   2          T4T3M |= 0x80; // 启动定时器
  265   2          IE2 |= 0x40; // 使能定时器中断
  266   2        }
  267   1      }
  268          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       413     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

C251 COMPILER V5.60.0,  SEEKFREE_ICM20602                                                  16/03/22  15:38:02  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE SEEKFREE_ICM20602
OBJECT MODULE PLACED IN .\Out_File\SEEKFREE_ICM20602.obj
COMPILER INVOKED BY: D:\Keil_v5\C251\BIN\C251.EXE ..\..\Libraries\seekfree_peripheral\SEEKFREE_ICM20602.c XSMALL INTR2 W
                    -ARNINGLEVEL(3) BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_perip
                    -heral;..\CODE;..\USER\inc;..\USER\src;.\Out_File) DEBUG PRINT(.\Out_File\SEEKFREE_ICM20602.lst) TABS(2) OBJECT(.\Out_Fil
                    -e\SEEKFREE_ICM20602.obj) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2           * COPYRIGHT NOTICE
    3           * Copyright (c) 2018,逐飞科技
    4           * All rights reserved.
    5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897
    6           *
    7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
    8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
    9           *
   10           * @file          ICM20602
   11           * @company       成都逐飞科技有限公司
   12           * @author        逐飞科技(QQ3184284598)
   13           * @version       查看doc内version文件 版本说明
   14           * @Software    MDK FOR C251 V5.60
   15           * @Taobao      https://seekfree.taobao.com/
   16           * @date          2019-04-30
   17           * @note    
   18                    接线定义：
   19                    ------------------------------------ 
   20          
   21                    ------------------------------------ 
   22           ********************************************************************************************************
             -************/
   23          
   24          
   25          #include "SEEKFREE_ICM20602.h"
   26          #include "SEEKFREE_IIC.h"
   27          #include "zf_delay.h"
   28          #include "zf_spi.h"
   29          
   30          int16 icm_gyro_x,icm_gyro_y,icm_gyro_z;
   31          int16 icm_acc_x,icm_acc_y,icm_acc_z;
   32          
   33          
   34          
   35          //-------------------------------------------------------------------------------------------------------
             -------------
   36          //  以下函数是使用软件IIC通信，相比较硬件IIC，软件IIC引脚更加灵活，可以使用任意普通IO
   37          //-------------------------------------------------------------------------------------------------------
             -------------
   38          //-------------------------------------------------------------------------------------------------------
             -------------
   39          //  @brief      ICM20602自检函数
   40          //  @param      NULL
   41          //  @return     void
   42          //  @since      v1.0
   43          //  Sample usage:       调用该函数前，请先调用模拟IIC的初始化
   44          //-------------------------------------------------------------------------------------------------------
             -------------
   45          void icm20602_self1_check(void)
   46          {
   47   1          uint8 dat;
   48   1        dat = simiic_read_reg(ICM20602_DEV_ADDR,ICM20602_WHO_AM_I,SIMIIC);
   49   1          while(0x12 != dat)   //读取ICM20602 ID
   50   1          {
C251 COMPILER V5.60.0,  SEEKFREE_ICM20602                                                  16/03/22  15:38:02  PAGE 2   

   51   2              dat = simiic_read_reg(ICM20602_DEV_ADDR,ICM20602_WHO_AM_I,SIMIIC);
   52   2              delay_ms(10);
   53   2              //卡在这里原因有以下几点
   54   2              //1 ICM20602坏了，如果是新的这样的概率极低
   55   2              //2 接线错误或者没有接好
   56   2              //3 可能你需要外接上拉电阻，上拉到3.3V
   57   2          }
   58   1      }
   59          
   60          
   61          
   62          //-------------------------------------------------------------------------------------------------------
             -------------
   63          //  @brief      软件IIC，初始化ICM20602
   64          //  @param      NULL
   65          //  @return     void
   66          //  @since      v1.0
   67          //  Sample usage:       调用该函数前，请先调用模拟IIC的初始化
   68          //-------------------------------------------------------------------------------------------------------
             -------------
   69          void icm20602_init_simiic(void)
   70          {
   71   1          delay_ms(10);  //上电延时
   72   1      
   73   1          //检测
   74   1          icm20602_self1_check();
   75   1      
   76   1          //复位
   77   1          simiic_write_reg(ICM20602_DEV_ADDR,ICM20602_PWR_MGMT_1,0x80);               //复位设备
   78   1          delay_ms(2);                                                        //延时
   79   1          while(0x80 & simiic_read_reg(ICM20602_DEV_ADDR,ICM20602_PWR_MGMT_1,SIMIIC));//等待复位完成
   80   1      
   81   1          //配置参数
   82   1          simiic_write_reg(ICM20602_DEV_ADDR,ICM20602_PWR_MGMT_1,0x01);               //时钟设置
   83   1          simiic_write_reg(ICM20602_DEV_ADDR,ICM20602_PWR_MGMT_2,0x00);               //开启陀螺仪和加速度计
   84   1          simiic_write_reg(ICM20602_DEV_ADDR,ICM20602_CONFIG,0x01);                   //176HZ 1KHZ
   85   1          simiic_write_reg(ICM20602_DEV_ADDR,ICM20602_SMPLRT_DIV,0x07);               //采样速率 SAMPLE_RATE = 
             -INTERNAL_SAMPLE_RATE / (1 + SMPLRT_DIV)
   86   1          simiic_write_reg(ICM20602_DEV_ADDR,ICM20602_GYRO_CONFIG,0x18);              //±2000 dps
   87   1          simiic_write_reg(ICM20602_DEV_ADDR,ICM20602_ACCEL_CONFIG,0x10);             //±8g
   88   1          simiic_write_reg(ICM20602_DEV_ADDR,ICM20602_ACCEL_CONFIG_2,0x03);           //Average 4 samples   44.
             -8HZ   //0x23 Average 16 samples
   89   1      }
   90          
   91          
   92          //-------------------------------------------------------------------------------------------------------
             -------------
   93          //  @brief      获取ICM20602加速度计数据
   94          //  @param      NULL
   95          //  @return     void
   96          //  @since      v1.0
   97          //  Sample usage:       执行该函数后，直接查看对应的变量即可
   98          //-------------------------------------------------------------------------------------------------------
             -------------
   99          void get_icm20602_accdata_simiic(void)
  100          {
  101   1          uint8 dat[6];
  102   1      
  103   1          simiic_read_regs(ICM20602_DEV_ADDR, ICM20602_ACCEL_XOUT_H, dat, 6, SIMIIC);
  104   1          icm_acc_x = (int16)(((uint16)dat[0]<<8 | dat[1]));
  105   1          icm_acc_y = (int16)(((uint16)dat[2]<<8 | dat[3]));
  106   1          icm_acc_z = (int16)(((uint16)dat[4]<<8 | dat[5]));
  107   1      }
  108          
  109          //-------------------------------------------------------------------------------------------------------
             -------------
C251 COMPILER V5.60.0,  SEEKFREE_ICM20602                                                  16/03/22  15:38:02  PAGE 3   

  110          //  @brief      获取ICM20602陀螺仪数据
  111          //  @param      NULL
  112          //  @return     void
  113          //  @since      v1.0
  114          //  Sample usage:       执行该函数后，直接查看对应的变量即可
  115          //-------------------------------------------------------------------------------------------------------
             -------------
  116          void get_icm20602_gyro_simiic(void)
  117          {
  118   1          uint8 dat[6];
  119   1      
  120   1          simiic_read_regs(ICM20602_DEV_ADDR, ICM20602_GYRO_XOUT_H, dat, 6, SIMIIC);
  121   1          icm_gyro_x = (int16)(((uint16)dat[0]<<8 | dat[1]));
  122   1          icm_gyro_y = (int16)(((uint16)dat[2]<<8 | dat[3]));
  123   1          icm_gyro_z = (int16)(((uint16)dat[4]<<8 | dat[5]));
  124   1      }
  125          
  126          
  127          
  128          
  129          //-------------------------------------------------------------------------------------------------------
             -------------
  130          //  以下函数是使用软件SPI通信，相比较硬件SPI，软件SPI引脚更加灵活，可以使用任意普通IO
  131          //-------------------------------------------------------------------------------------------------------
             -------------
  132          
  133          
  134          
  135          //-------------------------------------------------------------------------------------------------------
             -------------
  136          //  @brief      通过SPI写一个byte,同时读取一个byte
  137          //  @param      byte        发送的数据    
  138          //  @return     uint8       return 返回status状态
  139          //  @since      v1.0
  140          //  Sample usage:
  141          //-------------------------------------------------------------------------------------------------------
             -------------
  142          uint8 icm_simspi_wr_byte(uint8 byte)
  143          {
  144   1          uint8 i;
  145   1        
  146   1          for(i=0; i<8; i++)
  147   1          {
  148   2              ICM20602_MOSI(byte&0x80);
  149   2              byte <<= 1;
  150   2          ICM20602_SCK (0);
  151   2          
  152   2              ICM20602_SCK (1);
  153   2          byte |= ICM20602_MISO; 
  154   2          } 
  155   1          return(byte);                                         
  156   1      }
  157          
  158          //-------------------------------------------------------------------------------------------------------
             -------------
  159          //  @brief      将val写入cmd对应的寄存器地址,同时返回status字节
  160          //  @param      cmd         命令字
  161          //  @param      val         待写入寄存器的数值
  162          //  @since      v1.0
  163          //  Sample usage:
  164          //-------------------------------------------------------------------------------------------------------
             -------------
  165          void icm_simspi_w_reg_byte(uint8 cmd, uint8 val)
  166          {
  167   1          ICM20602_CSN (0);
  168   1          cmd |= ICM20602_SPI_W;
C251 COMPILER V5.60.0,  SEEKFREE_ICM20602                                                  16/03/22  15:38:02  PAGE 4   

  169   1          icm_simspi_wr_byte(cmd);                        
  170   1          icm_simspi_wr_byte(val);                                
  171   1          ICM20602_CSN (1);                                     
  172   1      }
  173          
  174          //-------------------------------------------------------------------------------------------------------
             -------------
  175          //  @brief      读取cmd所对应的寄存器地址
  176          //  @param      cmd         命令字
  177          //  @param      *val        存储读取的数据地址
  178          //  @since      v1.0
  179          //  Sample usage:
  180          //-------------------------------------------------------------------------------------------------------
             -------------
  181          void icm_simspi_r_reg_byte(uint8 cmd, uint8 *val)
  182          {
  183   1          ICM20602_CSN (0);
  184   1          cmd |= ICM20602_SPI_R;
  185   1          icm_simspi_wr_byte(cmd);                                
  186   1          *val = icm_simspi_wr_byte(0);                             
  187   1          ICM20602_CSN (1);                                     
  188   1      }
  189          
  190          //-------------------------------------------------------------------------------------------------------
             -------------
  191          //  @brief      读取cmd所对应的寄存器地址
  192          //  @param      cmd         命令字
  193          //  @param      *val        存储读取的数据地址
  194          //  @param      num         读取的数量
  195          //  @since      v1.0
  196          //  Sample usage:
  197          //-------------------------------------------------------------------------------------------------------
             -------------
  198          void icm_simspi_r_reg_bytes(uint8 cmd, uint8 *val, uint8 num)
  199          {
  200   1          uint16 i;
  201   1          ICM20602_CSN (0);
  202   1          cmd |= ICM20602_SPI_R;
  203   1          icm_simspi_wr_byte(cmd);
  204   1        
  205   1        for(i=0; i<num; i++)  
  206   1          val[i] = icm_simspi_wr_byte(0);    
  207   1      
  208   1        
  209   1          ICM20602_CSN (1);                                       
  210   1      }
  211          
  212          
  213          //-------------------------------------------------------------------------------------------------------
             -------------
  214          //  @brief      ICM20602自检函数
  215          //  @param      NULL
  216          //  @return     void          
  217          //  @since      v1.0
  218          //  Sample usage:       
  219          //-------------------------------------------------------------------------------------------------------
             -------------
  220          void icm20602_self4_check(void)
  221          {
  222   1          uint8 val;
  223   1          do
  224   1          {
  225   2              icm_simspi_r_reg_byte(ICM20602_WHO_AM_I,&val);
  226   2          
  227   2              //卡在这里原因有以下几点
  228   2              //1 ICM20602坏了，如果是新的这样的概率极低
C251 COMPILER V5.60.0,  SEEKFREE_ICM20602                                                  16/03/22  15:38:02  PAGE 5   

  229   2              //2 接线错误或者没有接好
  230   2              //3 可能你需要外接上拉电阻，上拉到3.3V
  231   2          }while(0x12 != val);
  232   1      }
  233          
  234          
  235          //-------------------------------------------------------------------------------------------------------
             -------------
  236          //  @brief      软件SPI，初始化ICM20602
  237          //  @param      NULL
  238          //  @return     void          
  239          //  @since      v1.0
  240          //  Sample usage:       
  241          //-------------------------------------------------------------------------------------------------------
             -------------
  242          void icm20602_init_simspi(void)
  243          {
  244   1          uint8 val;
  245   1      
  246   1          icm20602_self4_check();//检测
  247   1          
  248   1          icm_simspi_w_reg_byte(ICM20602_PWR_MGMT_1,0x80);//复位设备
  249   1          delay_ms(2);
  250   1          do
  251   1          {//等待复位成功
  252   2              icm_simspi_r_reg_byte(ICM20602_PWR_MGMT_1,&val);
  253   2          }while(0x41 != val);
  254   1          
  255   1          icm_simspi_w_reg_byte(ICM20602_PWR_MGMT_1,     0x01);            //时钟设置
  256   1          icm_simspi_w_reg_byte(ICM20602_PWR_MGMT_2,     0x00);            //开启陀螺仪和加速度计
  257   1          icm_simspi_w_reg_byte(ICM20602_CONFIG,         0x01);            //176HZ 1KHZ
  258   1          icm_simspi_w_reg_byte(ICM20602_SMPLRT_DIV,     0x07);            //采样速率 SAMPLE_RATE = INTERNAL_SA
             -MPLE_RATE / (1 + SMPLRT_DIV)
  259   1          icm_simspi_w_reg_byte(ICM20602_GYRO_CONFIG,    0x18);            //±2000 dps
  260   1          icm_simspi_w_reg_byte(ICM20602_ACCEL_CONFIG,   0x10);            //±8g
  261   1          icm_simspi_w_reg_byte(ICM20602_ACCEL_CONFIG_2, 0x03);            //Average 8 samples   44.8HZ
  262   1          
  263   1      }
  264          
  265          
  266          //-------------------------------------------------------------------------------------------------------
             -------------
  267          //  @brief      获取ICM20602加速度计数据
  268          //  @param      NULL
  269          //  @return     void
  270          //  @since      v1.0
  271          //  Sample usage:       执行该函数后，直接查看对应的变量即可
  272          //-------------------------------------------------------------------------------------------------------
             -------------
  273          void get_icm20602_accdata_simspi(void)
  274          {
  275   1          uint8 dat[6];
  276   1      
  277   1          
  278   1          icm_simspi_r_reg_bytes(ICM20602_ACCEL_XOUT_H, dat, 6);
  279   1          icm_acc_x = (int16)(((uint16)dat[0]<<8 | dat[1]));
  280   1          icm_acc_y = (int16)(((uint16)dat[2]<<8 | dat[3]));
  281   1          icm_acc_z = (int16)(((uint16)dat[4]<<8 | dat[5]));
  282   1      }
  283          
  284          //-------------------------------------------------------------------------------------------------------
             -------------
  285          //  @brief      获取ICM20602陀螺仪数据
  286          //  @param      NULL
  287          //  @return     void
  288          //  @since      v1.0
C251 COMPILER V5.60.0,  SEEKFREE_ICM20602                                                  16/03/22  15:38:02  PAGE 6   

  289          //  Sample usage:       执行该函数后，直接查看对应的变量即可
  290          //-------------------------------------------------------------------------------------------------------
             -------------
  291          void get_icm20602_gyro_simspi(void)
  292          {
  293   1          uint8 dat[6];
  294   1          
  295   1          icm_simspi_r_reg_bytes(ICM20602_GYRO_XOUT_H, dat, 6);
  296   1      
  297   1          icm_gyro_x = (int16)(((uint16)dat[0]<<8 | dat[1]));
  298   1          icm_gyro_y = (int16)(((uint16)dat[2]<<8 | dat[3]));
  299   1          icm_gyro_z = (int16)(((uint16)dat[4]<<8 | dat[5]));
  300   1      }
  301          
  302          
  303          float GYRO_Ang_Y=0.0;
  304          float ACC_GYRO_Ang_Y=0.0;
  305          //***************反正切Y轴角度*************************//
  306          /*
  307           * 函数名：ICM20689_ACC_angle_X_Z
  308           * 描述  ：加速度计反正切角度
  309           * 输入  ：无
  310           * 输出  ：角度值
  311           * 调用  ：内部调用
  312           */
  313          
  314          float ICM20602_ACC_angle_X_Z(void)                       
  315          {
  316   1        get_icm20602_accdata_simspi();
  317   1        return (atan2((float)icm_acc_z,(float)icm_acc_x)*(180.0/PI));   //反正切加速度计得到角度值
  318   1      }
  319          
  320          //**************积分Y轴角度*************************//
  321          /*
  322           * 函数名：ICM20689_GYRO_Y_Ang(void)
  323           * 描述  ：积分Y轴角度
  324           * 输入  ：无
  325           * 输出  ：无
  326           * 调用  ：内部调用
  327           */
  328           
  329          void ICM20602_GYRO_Y_Ang()
  330          {
  331   1        get_icm20602_gyro_simspi();   //获取Y轴陀螺仪值
  332   1        GYRO_Ang_Y +=((float)icm_gyro_y)*0.00032;  //积分角度
  333   1      }
  334          
  335          //***************加速度计和陀螺仪数据融合*****************************//
  336          
  337          void ICM20602_GYRO_ACCEL_Ang_Y(void)
  338          { 
  339   1        static float temp_p = 0.0;
  340   1        float ACCEL_Ang_Y=0.0;
  341   1        ICM20602_GYRO_Y_Ang();
  342   1        ACCEL_Ang_Y=ICM20602_ACC_angle_X_Z();
  343   1        temp_p=(ACCEL_Ang_Y-GYRO_Ang_Y)*0.025;//融合系数  //0.025
  344   1        GYRO_Ang_Y=GYRO_Ang_Y+temp_p;  
  345   1        ACC_GYRO_Ang_Y=GYRO_Ang_Y;
  346   1      }
  347          
  348          int16 GyroOffset_x,GyroOffset_y,GyroOffset_z;// 陀螺仪校准值 
  349          /**
  350           * @brief 陀螺仪零漂初始化
  351           * 通过采集一定数据求均值计算陀螺仪零点偏移值。
  352           * 后续 陀螺仪读取的数据 - 零飘值，即可去除零点偏移量。
  353           */
C251 COMPILER V5.60.0,  SEEKFREE_ICM20602                                                  16/03/22  15:38:02  PAGE 7   

  354          void gyroOffsetInit(void)     
  355          {
  356   1          int16 i =0;
  357   1          GyroOffset_x = 0;
  358   1          GyroOffset_y = 0;
  359   1          GyroOffset_z = 0;
  360   1          for ( i = 0; i < 10; ++i) 
  361   1          {
  362   2              get_icm20602_gyro_simspi();    // 获取陀螺仪角速度
  363   2              GyroOffset_x += icm_gyro_x;
  364   2              GyroOffset_y += icm_gyro_y;
  365   2              GyroOffset_z += icm_gyro_z;
  366   2              delay_ms(5);    // 最大 1Khz
  367   2          }
  368   1          GyroOffset_x /= 100;
  369   1          GyroOffset_y /= 100;
  370   1          GyroOffset_z /= 100;
  371   1      }
  372          
  373          /**
  374           * @brief 将采集的数值转化为实际物理值, 并对陀螺仪进行去零漂处理
  375           * 加速度计初始化配置 -> 测量范围: ±8g        对应灵敏度: 4096 LSB/g
  376           * 陀螺仪初始化配置   -> 测量范围: ±2000 dps  对应灵敏度: 16.4 LSB/dps   (degree per second)
  377           * @tips: gyro = (gyro_val / 16.4) °/s = ((gyro_val / 16.4) * PI / 180) rad/s
  378           */
  379          
  380          //void icmGetValues(void) 
  381          //{
  382          //    float alpha = 0.451;//要改
  383          
  384          //    //一阶低通滤波，单位g
  385          //    icm_data.acc_x = (((float) icm_acc_x) * alpha) / 4096 + icm_data.acc_x * (1 - alpha);
  386          //    icm_data.acc_y = (((float) icm_acc_y) * alpha) / 4096 + icm_data.acc_y * (1 - alpha);
  387          //    icm_data.acc_z = (((float) icm_acc_z) * alpha) / 4096 + icm_data.acc_z * (1 - alpha);
  388          
  389          //    //! 陀螺仪角速度必须转换为弧度制角速度: deg/s -> rad/s
  390          //    icm_data.gyro_x = ((float) icm_gyro_x - GyroOffset_x) * PI / 180 / 16.4f; 
  391          //    icm_data.gyro_y = ((float) icm_gyro_y - GyroOffset_y) * PI / 180 / 16.4f;
  392          //    icm_data.gyro_z = ((float) icm_gyro_z - GyroOffset_z) * PI / 180 / 16.4f;
  393          //}
  394          
  395          //#define delta_T     0.001f  // 采样周期1ms 即频率1KHZ
  396          
  397          //float I_ex, I_ey, I_ez;  // 误差积分
  398          //quater_param_t Q_info = {1, 0, 0, 0};  // 四元数初始化
  399          //euler_param_t eulerAngle;              // 欧拉角
  400          //Icm_data icm_data;               // ICM20602采集的六轴数值
  401          
  402          //float icm_kp= 0.17;    // 加速度计的收敛速率比例增益
  403          //float icm_ki= 0.004;   // 陀螺仪收敛速率的积分增益
  404          
  405          ///**
  406          // * @brief 用互补滤波算法解算陀螺仪姿态(即利用加速度计修正陀螺仪的积分误差)
  407          // * 加速度计对振动之类的噪声比较敏感，长期数据计算出的姿态可信；陀螺仪对振动噪声不敏感，短期数据可信，但
             -长期使用积分误差严重(内部积分算法放大静态误差)。
  408          // * 因此使用姿态互补滤波，短期相信陀螺仪，长期相信加速度计。
  409          // * @tips: n - 导航坐标系； b - 载体坐标系
  410          // */
  411          //#define sampleFreq  512.0f    // sample frequency in Hz
  412          //#define betaDef   0.1f    // 2 * proportional gain
  413          
  414          //---------------------------------------------------------------------------------------------------
  415          // Variable definitions
  416          
  417          //volatile float beta = betaDef;  
  418          //void icmAHRSupdate(Icm_data* icm) 
C251 COMPILER V5.60.0,  SEEKFREE_ICM20602                                                  16/03/22  15:38:02  PAGE 8   

  419          //{
  420          //  float recipNorm;
  421          //  float s0, s1, s2, s3;
  422          //  float qDot1, qDot2, qDot3, qDot4;
  423          //  float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;
  424          //  float q0 = Q_info.q0;  //四元数
  425          //  float q1 = Q_info.q1;
  426          //  float q2 = Q_info.q2;
  427          //  float q3 = Q_info.q3;
  428          //  // Rate of change of quaternion from gyroscope
  429          //  qDot1 = 0.5f * (-q1 * icm->gyro_x - q2 * icm->gyro_y - q3 * icm->gyro_z);
  430          //  qDot2 = 0.5f * (q0 * icm->gyro_x + q2 * icm->gyro_z - q3 * icm->gyro_y);
  431          //  qDot3 = 0.5f * (q0 * icm->gyro_y - q1 * icm->gyro_z + q3 * icm->gyro_x);
  432          //  qDot4 = 0.5f * (q0 * icm->gyro_z + q1 * icm->gyro_y - q2 * icm->gyro_x);
  433          
  434          //  // Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation
             -)
  435          //  if(!((icm->acc_x == 0.0f) && (icm->acc_y == 0.0f) && (icm->acc_z == 0.0f))) {
  436          
  437          //    // Normalise accelerometer measurement
  438          //    recipNorm = invSqrt(icm->acc_x * icm->acc_x + icm->acc_y * icm->acc_y + icm->acc_z * icm->acc_z);
  439          //    icm->acc_x *= recipNorm;
  440          //    icm->acc_y *= recipNorm;
  441          //    icm->acc_z *= recipNorm;   
  442          
  443          //    // Auxiliary variables to avoid repeated arithmetic
  444          //    _2q0 = 2.0f * q0;
  445          //    _2q1 = 2.0f * q1;
  446          //    _2q2 = 2.0f * q2;
  447          //    _2q3 = 2.0f * q3;
  448          //    _4q0 = 4.0f * q0;
  449          //    _4q1 = 4.0f * q1;
  450          //    _4q2 = 4.0f * q2;
  451          //    _8q1 = 8.0f * q1;
  452          //    _8q2 = 8.0f * q2;
  453          //    q0q0 = q0 * q0;
  454          //    q1q1 = q1 * q1;
  455          //    q2q2 = q2 * q2;
  456          //    q3q3 = q3 * q3;
  457          
  458          //    // Gradient decent algorithm corrective step
  459          //    s0 = _4q0 * q2q2 + _2q2 * icm->acc_x + _4q0 * q1q1 - _2q1 * icm->acc_y;
  460          //    s1 = _4q1 * q3q3 - _2q3 * icm->acc_x + 4.0f * q0q0 * q1 - _2q0 * icm->acc_y - _4q1 + _8q1 * q1q1 + _8
             -q1 * q2q2 + _4q1 * icm->acc_z;
  461          //    s2 = 4.0f * q0q0 * q2 + _2q0 * icm->acc_x + _4q2 * q3q3 - _2q3 * icm->acc_y - _4q2 + _8q2 * q1q1 + _8
             -q2 * q2q2 + _4q2 * icm->acc_z;
  462          //    s3 = 4.0f * q1q1 * q3 - _2q1 * icm->acc_x + 4.0f * q2q2 * q3 - _2q2 * icm->acc_y;
  463          //    recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
  464          //    s0 *= recipNorm;
  465          //    s1 *= recipNorm;
  466          //    s2 *= recipNorm;
  467          //    s3 *= recipNorm;
  468          
  469          //    // Apply feedback step
  470          //    qDot1 -= beta * s0;
  471          //    qDot2 -= beta * s1;
  472          //    qDot3 -= beta * s2;
  473          //    qDot4 -= beta * s3;
  474          //  }
  475          
  476          //  // Integrate rate of change of quaternion to yield quaternion
  477          //  q0 += qDot1 * (1.0f / sampleFreq);
  478          //  q1 += qDot2 * (1.0f / sampleFreq);
  479          //  q2 += qDot3 * (1.0f / sampleFreq);
  480          //  q3 += qDot4 * (1.0f / sampleFreq);
  481          
C251 COMPILER V5.60.0,  SEEKFREE_ICM20602                                                  16/03/22  15:38:02  PAGE 9   

  482          //  // Normalise quaternion
  483          //  recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
  484          //  q0 *= recipNorm;
  485          //  q1 *= recipNorm;
  486          //  q2 *= recipNorm;
  487          //  q3 *= recipNorm;
  488          //}
  489          //float invSqrt(float x) 
  490          //{
  491          //  float halfx = 0.5f * x;
  492          //  float y = x;
  493          //  long i = *(long*)&y;
  494          //  i = 0x5f3759df - (i>>1);
  495          //  y = *(float*)&i;
  496          //  y = y * (1.5f - (halfx * y * y));
  497          //  return y;
  498          //}
*** WARNING C183 IN LINE 340 OF ..\..\Libraries\seekfree_peripheral\SEEKFREE_ICM20602.c: dead assignment eliminated


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       900     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        30         29
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        24     ------
End of Module Information.


C251 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)

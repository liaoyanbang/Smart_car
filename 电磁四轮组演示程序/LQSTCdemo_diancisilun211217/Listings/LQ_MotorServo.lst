C251 COMPILER V5.60.0,  LQ_MotorServo                                                      21/12/21  22:07:38  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE LQ_MotorServo
OBJECT MODULE PLACED IN .\Objects\LQ_MotorServo.obj
COMPILER INVOKED BY: D:\Keil_v5\C251\BIN\C251.EXE user\LQ_MotorServo.c LARGE INTR2 BROWSE INCDIR(.\user;.\user\Dianci) D
                    -EBUG PRINT(.\Listings\LQ_MotorServo.lst) TABS(2) OBJECT(.\Objects\LQ_MotorServo.obj) 

stmt  level    source

    1          /*LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
    2          【平    台】北京龙邱智能科技STC16核心板
    3          【编    写】chiusir
    4          【E-mail  】chiusir@163.com
    5          【软件版本】V1.1 版权所有，单位使用请先联系授权
    6          【最后更新】2021年1月23日
    7          【相关信息参考下列地址】
    8          【网    站】http://www.lqist.cn
    9          【淘宝店铺】http://longqiu.taobao.com
   10          ------------------------------------------------
   11          【IDE】STC16
   12          【Target 】 C251Keil5.6及以上
   13          【SYS PLL】 30MHz使用内部晶振
   14          =================================================================
   15          STC16相关配套视频：
   16          龙邱科技B站网址：https://space.bilibili.com/95313236
   17          STC16环境下载参考视频： https://www.bilibili.com/video/BV1gy4y1p7T1/
   18          STC16一体板子介绍视频： https://www.bilibili.com/video/BV1Jy4y1e7R4/
   19          =================================================================
   20          下载时, 选择时钟 30MHZ (用户可自行修改频率).
   21          STC16F初次下载:先用IRCBND=0，ISP界面设置为24M，
   22          然后IRCBND=0，下载频率为30M；
   23          或者IRCBND=1，下载频率为30M；好用为准
   24          QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ*/
   25          #include "include.h"
   26          
   27          #define USEDRV8701     //使用不同的驱动，定义不同的宏定义
   28          //#define USE7843OR7971//使用不同的驱动，定义不同的宏定义
   29          
   30          #define PWM1_0      0x00  //P:P1.0  N:P1.1
   31          #define PWM1_1      0x01  //P:P2.0  N:P2.1 
   32          #define PWM1_2      0x02  //P:P6.0  N:P6.1
   33          
   34          #define PWM2_0      0x00  //P:P1.2/P5.4  N:P1.3
   35          #define PWM2_1      0x04  //P:P2.2  N:P2.3
   36          #define PWM2_2      0x08  //P:P6.2  N:P6.3
   37          
   38          #define PWM3_0      0x00  //P:P1.4  N:P1.5
   39          #define PWM3_1      0x10  //P:P2.4  N:P2.5
   40          #define PWM3_2      0x20  //P:P6.4  N:P6.5
   41          
   42          #define PWM4_0      0x00  //P:P1.6  N:P1.7
   43          #define PWM4_1      0x40  //P:P2.6  N:P2.7
   44          #define PWM4_2      0x80  //P:P6.6  N:P6.7
   45          #define PWM4_3      0xC0  //P:P3.4  N:P3.3
   46          
   47          #define PWM5_0      0x00  //P2.0
   48          #define PWM5_1      0x01  //P1.7
   49          #define PWM5_2      0x02  //P0.0
   50          #define PWM5_3      0x03  //P7.4
   51          
   52          #define PWM6_0      0x00  //P2.1
   53          #define PWM6_1      0x04  //P5.4
   54          #define PWM6_2      0x08  //P0.1
   55          #define PWM6_3      0x0C  //P7.5
   56          
   57          #define PWM7_0      0x00  //P2.2
   58          #define PWM7_1      0x10  //P3.3
C251 COMPILER V5.60.0,  LQ_MotorServo                                                      21/12/21  22:07:38  PAGE 2   

   59          #define PWM7_2      0x20  //P0.2
   60          #define PWM7_3      0x30  //P7.6
   61          
   62          #define PWM8_0      0x00  //P2.3
   63          #define PWM8_1      0x40  //P3.4
   64          #define PWM8_2      0x80  //P0.3
   65          #define PWM8_3      0xC0  //P7.7
   66          
   67          #define ENO5P       0x01
   68          #define ENO6P       0x04
   69          #define ENO7P       0x10
   70          #define ENO8P       0x40
   71          #define ENO1P       0x01
   72          #define ENO1N       0x02
   73          #define ENO2P       0x04
   74          #define ENO2N       0x08
   75          #define ENO3P       0x10
   76          #define ENO3N       0x20
   77          #define ENO4P       0x40
   78          #define ENO4N       0x80
   79          
   80          
   81          u16 PWM1_Duty;
   82          u16 PWM2_Duty;
   83          u16 PWM3_Duty;
   84          u16 PWM4_Duty;
   85          /*LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
   86          【函数名】void MotorInit(u16 freq)
   87          【功  能】电机PWM初始化
   88          【参数值】int Encoder 编码器脉采集的冲数
   89          【参数值】int Target  期望脉冲数
   90          【返回值】电机PWM 
   91          【作  者】chiusir
   92          【最后更新】2021年1月22日 
   93          【软件版本】V1.0
   94          【调用举例】驱动电机  TIM4_PWM_Init(1000-1);  //1KHZ周期
   95          QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ*/
   96          #ifdef USE7843OR7971
               void MotorInit(u16 freq)
               {
                 P_SW2 |= 0x80;
                 PWM2_PSCRL = (MAIN_Fosc/PWM2_CLOCK)-1;    //主频为22M,PWM分频到10M范围 
                 PWM2_CCER1 = 0x00;                        //写 CCMRx 前必须先清零 CCxE 关闭通道
                 PWM2_CCER2 = 0x00;
                 PWM2_CCMR1 = 0x60;                        //通道模式配置
                 PWM2_CCMR2 = 0x60;
                 PWM2_CCMR3 = 0x60;
                 PWM2_CCMR4 = 0x60;
                 PWM2_CCER1 = 0x33;                        //配置通道输出使能和极性
                 PWM2_CCER2 = 0x33;
                 
                 PWM2_ARRH  = (u8)((PWM2_CLOCK/freq)>>8);  //设置周期时间，从0计数到设定数值
                 PWM2_ARRL  = (u8)(PWM2_CLOCK/freq); //  
                 
                 PWM2_CCR1H = 0;
                 PWM2_CCR1L = 20;  //设置占空比时间
                 PWM2_CCR2H = 0;
                 PWM2_CCR2L = 20;  //设置占空比时间  
                 PWM2_CCR3H = 0;
                 PWM2_CCR3L = 20;  //设置占空比时间
                 PWM2_CCR4H = 0; 
                 PWM2_CCR4L = 20;  //设置占空比时间
                 
                 PWM2_ENO = 0x00;
                 PWM2_ENO |= ENO5P; //使能输出
                 PWM2_ENO |= ENO6P; //使能输出 
C251 COMPILER V5.60.0,  LQ_MotorServo                                                      21/12/21  22:07:38  PAGE 3   

                 PWM2_ENO |= ENO7P; //使能输出
                 PWM2_ENO |= ENO8P; //使能输出 
                 PWM2_PS = 0x00;    //高级 PWM 通道输出脚选择位
                 PWM2_PS |= PWM5_3; //选择 PWM5_3 通道
                 PWM2_PS |= PWM6_3; //选择 PWM6_3 通道 //高级 PWM 通道 4P 输出脚选择位, 0x00:P1.6, 0x40:P2.6, 0x80:P6.6,
             - 0xC0:P3.4
                 PWM2_PS |= PWM7_3;
                 PWM2_PS |= PWM8_3;
                 PWM2_BKR = 0x80;   //使能主输出
                 PWM2_CR1 |= 0x01;  //开始计时
                 P_SW2 &= 0x7f;
               }
               #elif defined USEDRV8701
  137          void MotorInit(u16 freq)
  138          {
  139   1        P_SW2 |= 0x80;
  140   1        PWM2_PSCRL = (MAIN_Fosc/PWM2_CLOCK)-1;   //主频为22M,PWM分频到10M范围 
  141   1        PWM2_CCER1 = 0x00; //写 CCMRx 前必须先清零 CCxE 关闭通道
  142   1        PWM2_CCER2 = 0x00;
  143   1        PWM2_CCMR1 = 0x60; //通道模式配置
  144   1        PWM2_CCMR2 = 0x60;
  145   1        PWM2_CCMR3 = 0x60;
  146   1        PWM2_CCMR4 = 0x60;
  147   1        PWM2_CCER1 = 0x55; //配置通道输出使能和极性
  148   1        PWM2_CCER2 = 0x55;
  149   1        
  150   1        PWM2_ARRH  = (u8)((PWM2_CLOCK/freq)>>8);  //设置周期时间，从0计数到设定数值
  151   1        PWM2_ARRL  = (u8)(PWM2_CLOCK/freq); //  
  152   1        
  153   1        PWM2_CCR1H = 100;
  154   1        PWM2_CCR1L = 200;   //设置占空比时间
  155   1        PWM2_CCR3H = 100;
  156   1        PWM2_CCR3L = 200;   //设置占空比时间  
  157   1        
  158   1        PWM2_ENO = 0x00;
  159   1        PWM2_ENO |= ENO5P;  //使能输出
  160   1        //PWM2_ENO |= ENO6P;//使能输出 
  161   1        PWM2_ENO |= ENO7P;  //使能输出
  162   1        //PWM2_ENO |= ENO8P;//使能输出 
  163   1        PWM2_PS = 0x00;     //高级 PWM 通道输出脚选择位
  164   1        PWM2_PS |= PWM5_3;  //选择 PWM5_3 通道
  165   1        //PWM2_PS |= PWM6_3;//选择 PWM6_3 通道 //高级 PWM 通道 4P 输出脚选择位, 0x00:P1.6, 0x40:P2.6, 0x80:P6.6
             -, 0xC0:P3.4
  166   1        PWM2_PS |= PWM7_3;
  167   1        //PWM2_PS |= PWM8_3;
  168   1        PWM2_BKR = 0x80;      //使能主输出
  169   1        PWM2_CR1 |= 0x01;     //开始计时
  170   1        
  171   1        P7M1 = 0;   
  172   1        P7M0 = 0xA0;        //P75,P77设置为推挽输出，强上拉，要加限流电阻
  173   1        P7PU |= 0xA0;
  174   1        
  175   1        P_SW2 &= 0x7f;
  176   1      }
  177          #endif
  178          /*LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
  179          【函数名】void MotorCtrl(float motor1, float motor2)
  180          【功  能】电机控制函数
  181          【参数值】motor1   ： 电机1占空比
  182          【参数值】motor2   ： 电机2占空比
  183          【返回值】电机PWM 
  184          【作  者】chiusir
  185          【最后更新】2021年1月22日 
  186          【软件版本】V1.0
  187          【调用举例】 MotorCtrl (1000,-2000) //两个电机一正一反转动
  188          QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ*/
C251 COMPILER V5.60.0,  LQ_MotorServo                                                      21/12/21  22:07:38  PAGE 4   

  189          #ifdef  USE7843OR7971
               void MotorCtrl (int16_t motor1,int16_t motor2)
               {
                 if (motor1 < 0)
                 {  
                   motor1=0-motor1;
                   P_SW2 |= 0x80;
                   PWM2_CCR1H = 0; //设置占空比时间
                   PWM2_CCR1L = 0;
                   PWM2_CCR2H = (u8)(motor1 >> 8); //设置占空比时间
                   PWM2_CCR2L = (u8)(motor1);
                   P_SW2 &= 0x7f;
                 }
                 else
                 {
                   P_SW2 |= 0x80;
                   PWM2_CCR1H = (u8)(motor1 >> 8); //设置占空比时间
                   PWM2_CCR1L = (u8)(motor1);
                   PWM2_CCR2H = 0; //设置占空比时间
                   PWM2_CCR2L = 0;
                   P_SW2 &= 0x7f;
                 }  
                 if (motor2 < 0)
                 {  
                   motor2=0-motor2;
                   P_SW2 |= 0x80;
                   PWM2_CCR3H = 0; //设置占空比时间
                   PWM2_CCR3L = 0;
                   PWM2_CCR4H = (u8)(motor2 >> 8); //设置占空比时间
                   PWM2_CCR4L = (u8)(motor2);
                   P_SW2 &= 0x7f;
                 }
                 else
                 {
                   P_SW2 |= 0x80;
                   PWM2_CCR3H = (u8)(motor2 >> 8); //设置占空比时间
                   PWM2_CCR3L = (u8)(motor2);
                   PWM2_CCR4H = 0; //设置占空比时间
                   PWM2_CCR4L = 0;
                   P_SW2 &= 0x7f;
                 }  
               }
               #elif defined USEDRV8701
  232          void MotorCtrl (int16_t motor1,int16_t motor2)
  233          {
  234   1        if (motor1 < 0)
  235   1        {  
  236   2          motor1=0-motor1;
  237   2          P_SW2 |= 0x80;
  238   2          PWM2_CCR1H = (u8)(motor1 >> 8); //设置占空比时间
  239   2          PWM2_CCR1L = (u8)(motor1);
  240   2          P75=1;
  241   2          
  242   2          P_SW2 &= 0x7f;
  243   2        }
  244   1        else
  245   1        {
  246   2          P_SW2 |= 0x80;
  247   2          PWM2_CCR1H = (u8)(motor1 >> 8); //设置占空比时间
  248   2          PWM2_CCR1L = (u8)(motor1);
  249   2          P75=0;
  250   2          P_SW2 &= 0x7f;
  251   2        }
  252   1        
  253   1        if (motor2 < 0)
  254   1        {  
C251 COMPILER V5.60.0,  LQ_MotorServo                                                      21/12/21  22:07:38  PAGE 5   

  255   2          motor2=0-motor2;
  256   2          P_SW2 |= 0x80;
  257   2          PWM2_CCR3H = (u8)(motor2 >> 8); //设置占空比时间
  258   2          PWM2_CCR3L = (u8)(motor2);
  259   2          P77=1;
  260   2          P_SW2 &= 0x7f;
  261   2        }
  262   1        else
  263   1        {
  264   2          P_SW2 |= 0x80;
  265   2          PWM2_CCR3H = (u8)(motor2 >> 8); //设置占空比时间
  266   2          PWM2_CCR3L = (u8)(motor2);
  267   2          P77=0;
  268   2          P_SW2 &= 0x7f;
  269   2        }  
  270   1      }
  271          #endif
  272          /*LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
  273          【函数名】TestMotor(void)
  274          【功  能】测试标定输出PWM控制电机
  275          【参数值】无
  276          【参数值】无
  277          【返回值】无
  278          【作  者】chiusir
  279          【最后更新】2021年1月22日 
  280          【软件版本】V1.0
  281          【调用举例】
  282          【注意事项】注意，一定要对电机输出进行限制
  283          使用龙邱母板测试电机及驱动流程：
  284          1.先使用万用表测量电池电压，务必保证电池电压在7V以上，否则无力不反应！
  285          2.接好母板到驱动板的信号线及电源线；
  286          3.接好驱动板到电机的导线；
  287          4.烧写程序并运行，确定电机能正常转动后，开启驱动板电源开关；
  288          5.按键K0/K1确定电机转动速度及方向；
  289          6.如果出现疯转，按下K1键返回低速模式，或者直接关闭驱动板电源！
  290          QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ*/
  291          void TestMotor (void)
  292          {
  293   1        short duty = 20;
  294   1        char txt[16];
  295   1        OLED_Init(); 
  296   1        OLED_CLS();               // 清屏
  297   1        OLED_P6x8Str(2, 0, "LQ Motor Test");
  298   1        MotorInit(MOTOR_FREQUENCY);       // 电机初始化
  299   1        while (1)
  300   1        {
  301   2          if (KEY_Read(KEY0) == 0)        // 按下KEY0键，占空比减小
  302   2          {
  303   3            if (duty > -(PWM2_CLOCK/MOTOR_FREQUENCY)) // 满占空比为10M/12.5k=800
  304   3              duty -= 30;
  305   3          }
  306   2          if (KEY_Read(KEY2) == 0)        // 按下KEY2键，占空比加大
  307   2          {
  308   3            if (duty < PWM2_CLOCK/MOTOR_FREQUENCY)  // 满占空比为10M/12.5k=800
  309   3              duty += 40;
  310   3          }
  311   2          if (KEY_Read(KEY1) == 0)        // 按下KEY1键，占空比中值
  312   2          {
  313   3            duty = 20;
  314   3          }
  315   2          
  316   2          MotorCtrl(duty,duty);
  317   2          
  318   2          sprintf(txt, "PWM: %05d;", duty);
  319   2          OLED_P6x8Str(0, 5, txt);      // 字符串显示
  320   2          UART1_PutStr(txt);
C251 COMPILER V5.60.0,  LQ_MotorServo                                                      21/12/21  22:07:38  PAGE 6   

  321   2          
  322   2          LED_Ctrl(LED0, RVS);          // 电平翻转,LED闪烁
  323   2          delayms(200);                 // 延时等待
  324   2        }
  325   1      }
  326          /*LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
  327          【函数名】void ServoInit(u16 freq)
  328          【功  能】舵机PWM初始化
  329          【参数值】u16 freq,期望频率，范围0--10000
  330          【参数值】无
  331          【返回值】无
  332          【作  者】chiusir
  333          【最后更新】2021年1月22日 
  334          【软件版本】V1.0
  335          【调用举例】驱动1个舵机 ServoInit(100);  //100HZ周期
  336          QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ*/
  337          void ServoInit(u16 freq)
  338          {
  339   1        P_SW2 |= 0x80;  
  340   1        //PWM1_PSCRL = 16; //分频范围  fcn_cnt=fck_psc/(PSCR[15:0]+1)
  341   1        PWM1_PSCRL = MAIN_Fosc/PWM1_CLOCK-1;      //主频为30M,PWM分频到1M范围  
  342   1        PWM1_CCER2 = 0x00; //写 CCMRx 前必须先清零 CCxE 关闭通道
  343   1        PWM1_CCMR4 = 0x60; //设置 PWM4 模式1 输出
  344   1        PWM1_CCER2 = 0x55; //使能 CC4E 通道
  345   1        
  346   1        PWM1_ARRH  = (u8)((PWM1_CLOCK/freq)>>8);  //设置周期时间，从0计数到设定数值
  347   1        PWM1_ARRL  = (u8)(PWM1_CLOCK/freq);       //
  348   1        
  349   1        PWM1_CCR4H = (u8)((Servo_Center)>>8);     //舵机中值
  350   1        PWM1_CCR4L = (u8)(Servo_Center);          //
  351   1        
  352   1        PWM1_ENO |= 0x80; //使能 PWM4N 输出
  353   1        PWM1_PS  |= 0x00; //高级 PWM 通道 4N 输出脚选择位, 0x00:P1.7, 0x40:P2.7, 0x80:P6.7, 0xC0:P3.3
  354   1        
  355   1        PWM1_BKR = 0x80;  //使能主输出
  356   1        PWM1_CR1 |= 0x01; //开始计时
  357   1        P_SW2 &= 0x7f;    
  358   1      }
  359          /*LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
  360          【函数名】void ServoCtrl (uint16_t duty)
  361          【功  能】舵机转角函数，由于小车拉杆范围限制，较小
  362          【参数值】short duty，占空比，范围0--10000；
  363          【参数值】int Target  期望脉冲数
  364          【返回值】电机PWM 
  365          【作  者】chiusir
  366          【最后更新】2021年1月22日 
  367          【软件版本】V1.0
  368          【调用举例】ServoCtrl (1500);//舵机中值
  369          QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ*/
  370          void ServoCtrl(uint16_t duty)
  371          {  
  372   1        /*
  373   1        if (duty >= Servo_Left_Max)                  //限制幅值
  374   1        duty = Servo_Left_Max;
  375   1          else if (duty < Servo_Right_Min)          //限制幅值
  376   1        duty = Servo_Right_Min;
  377   1        */
  378   1        P_SW2 |= 0x80;
  379   1        PWM1_CCR4H = (u8)(duty >> 8); //设置占空比时间
  380   1        PWM1_CCR4L = (u8)(duty);
  381   1        P_SW2 &= 0x7f;
  382   1      }
  383          /*LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
  384          【函数名】Test_Servo(void)
  385          【功  能】舵机PWM初始化，测试标定输出PWM控制SD5/S3010舵机
  386          【参数值】无
C251 COMPILER V5.60.0,  LQ_MotorServo                                                      21/12/21  22:07:38  PAGE 7   

  387          【参数值】无
  388          【返回值】无
  389          【作  者】chiusir
  390          【最后更新】2021年1月22日 
  391          【软件版本】V1.0
  392          【调用举例】
  393          【注意事项】注意，一定要对舵机打角进行限制
  394          使用龙邱母板测试舵机流程：
  395          1.先使用万用表测量电池电压，务必保证电池电压在7V以上，否则无力不反应！
  396          2.然后确定舵机供电电压，SD5舵机用5V供电，S3010用6-7V供电，SD012舵机用5V供电！！！
  397          3.把舵机的舵盘去掉，让舵机可以自由转动；
  398          4.烧写程序并运行，让舵机转动到中值附近；如果没反应重复1-2步，或者调整舵机的PWM频率计占空比，能受控为准；
  399          5.舵机受控后用手轻转，舵机会吱吱响，对抗转动，此时可以装上舵盘；
  400          6.按键K0/K1确定舵机的左右转动极限，并记下来，作为后续限幅防止舵机堵转烧毁！
  401          QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ*/
  402          void TestServo (void)
  403          {
  404   1        char txt[16] = "X:";
  405   1        u16 duty = Servo_Center;
  406   1        
  407   1        OLED_CLS();           // 清屏
  408   1        OLED_P6x8Str(2, 0, "LQ Servo Test");
  409   1        ServoInit(100);       // 舵机初始化，频率为100Hz
  410   1        ServoCtrl(Servo_Center);  // 舵机中值
  411   1        while (1)
  412   1        {
  413   2          if (!KEY_Read(KEY0))
  414   2          {
  415   3            if (duty > 100)   // 防止duty超
  416   3            {
  417   4              duty -= 10;     // 标定的时候，可以把步长改小点，比如10
  418   4            }
  419   3          }
  420   2          if (!KEY_Read(KEY1))
  421   2          {
  422   3            duty = Servo_Center;
  423   3          }
  424   2          if (!KEY_Read(KEY2))
  425   2          {
  426   3            duty += 10;
  427   3          }
  428   2          ServoCtrl(duty); 
  429   2          sprintf(txt, "Servo:%05d ", duty);
  430   2          OLED_P6x8Str(1, 2, txt);  // 显示
  431   2          LED_Ctrl(LED0, RVS);      // LED闪烁;
  432   2          delayms(100);        
  433   2        }
  434   1      }
  435          
  436          
  437          //


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       885     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =         8         32
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
C251 COMPILER V5.60.0,  LQ_MotorServo                                                      21/12/21  22:07:38  PAGE 8   

  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        67     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

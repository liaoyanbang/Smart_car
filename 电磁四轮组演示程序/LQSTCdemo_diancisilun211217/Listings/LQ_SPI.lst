C251 COMPILER V5.60.0,  LQ_SPI                                                             21/12/21  22:07:37  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE LQ_SPI
OBJECT MODULE PLACED IN .\Objects\LQ_SPI.obj
COMPILER INVOKED BY: D:\Keil_v5\C251\BIN\C251.EXE user\LQ_SPI.c LARGE INTR2 BROWSE INCDIR(.\user;.\user\Dianci) DEBUG PR
                    -INT(.\Listings\LQ_SPI.lst) TABS(2) OBJECT(.\Objects\LQ_SPI.obj) 

stmt  level    source

    1          /*LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
    2          【平    台】北京龙邱智能科技STC16核心板
    3          【编    写】chiusir
    4          【E-mail  】chiusir@163.com
    5          【软件版本】V1.1 版权所有，单位使用请先联系授权
    6          【最后更新】2021年1月23日
    7          【相关信息参考下列地址】
    8          【网    站】http://www.lqist.cn
    9          【淘宝店铺】http://longqiu.taobao.com
   10          ------------------------------------------------
   11          【IDE】STC16
   12          【Target 】 C251Keil5.6及以上
   13          【SYS PLL】 30MHz使用内部晶振
   14          =================================================================
   15          STC16相关配套视频：
   16          龙邱科技B站网址：https://space.bilibili.com/95313236
   17          STC16环境下载参考视频： https://www.bilibili.com/video/BV1gy4y1p7T1/
   18          STC16一体板子介绍视频： https://www.bilibili.com/video/BV1Jy4y1e7R4/
   19          =================================================================
   20          下载时, 选择时钟 30MHZ (用户可自行修改频率).
   21          STC16F初次下载:先用IRCBND=0，ISP界面设置为24M，
   22          然后IRCBND=0，下载频率为30M；
   23          或者IRCBND=1，下载频率为30M；好用为准
   24          QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ*/
   25          #include "include.h"
   26          
   27          /*************  SPI设备相关变量声明   **************/
   28          sbit    LQ_IMU_SCK = P2^5;                 //SCK
   29          sbit    LQ_IMU_SO  = P2^4;                 //MISO
   30          sbit    LQ_IMU_SI  = P2^3;                 //MOSI
   31          sbit    LQ_IMU_CE  = P2^2;                 //CS
   32          
   33          #define SPI_CE_High()   LQ_IMU_CE  = 1     // set CE high
   34          #define SPI_CE_Low()    LQ_IMU_CE  = 0     // clear CE low
   35          #define SPI_Hold()      P_SPI_Hold = 0     // clear Hold pin
   36          #define SPI_UnHold()    P_SPI_Hold = 1     // set Hold pin
   37          #define SPI_WP()        P_SPI_WP   = 0     // clear WP pin
   38          #define SPI_UnWP()      P_SPI_WP   = 1     // set WP pin
   39          
   40          /************************************************************************/
   41          void SPI_init(void)
   42          {
   43   1          SPCTL |=  (1 << 7);                    //忽略 SS 引脚功能，使用 MSTR 确定器件是主机还是从机
   44   1          SPCTL |=  (1 << 6);                    //使能 SPI 功能
   45   1          SPCTL &= ~(1 << 5);                    //先发送/接收数据的高位（ MSB）
   46   1          SPCTL |=  (1 << 4);                    //设置主机模式
   47   1          SPCTL &= ~(1 << 3);                    //SCLK 空闲时为低电平，SCLK 的前时钟沿为上升沿，后时钟沿为下降
             -沿
   48   1          SPCTL &= ~(1 << 2);                    //数据 SS 管脚为低电平驱动第一位数据并在 SCLK 的后时钟沿改变数
             -据
   49   1          SPCTL = (SPCTL & ~3) | 0;              //SPI 时钟频率选择, 0: 4T, 1: 8T,  2: 16T,  3: 32T
   50   1          P_SW1 = (P_SW1 & ~(3<<2)) | (1<<2);    //IO口切换. 0: P1.2/P5.4 P1.3 P1.4 P1.5, 
   51   1                                                 //1: P2.2 P2.3 P2.4 P2.5, 
   52   1                                                 //2: P5.4 P4.0 P4.1 P4.3, 
   53   1                                                 //3: P3.5 P3.4 P3.3 P3.2
   54   1                                                 
   55   1          LQ_IMU_SCK = 0;                        // set clock to low initial state
   56   1          LQ_IMU_SI = 1;    
C251 COMPILER V5.60.0,  LQ_SPI                                                             21/12/21  22:07:37  PAGE 2   

   57   1          SPSTAT = SPIF + WCOL;                  //清0 SPIF和WCOL标志
   58   1      }
   59          
   60          /************************************************************************/
   61          void SPI_WriteByte(u8 out)
   62          {  
   63   1          SPDAT = out;
   64   1          while((SPSTAT & SPIF) == 0) ;
   65   1          SPSTAT = SPIF + WCOL;                  //清0 SPIF和WCOL标志 
   66   1      }
   67          
   68          /************************************************************************/
   69          u8 SPI_ReadByte(void)
   70          {  
   71   1          SPDAT = 0xff;
   72   1          while((SPSTAT & SPIF) == 0) ;
   73   1          SPSTAT = SPIF + WCOL;                  //清0 SPIF和WCOL标志
   74   1          return (SPDAT);
   75   1      }
   76          
   77          /************************************************
   78          从Flash中读取数据
   79          入口参数:
   80              addr   : 地址参数
   81              lqbuf : 缓冲从Flash中读取的数据
   82              lqsize   : 数据块大小
   83          出口参数:
   84              无
   85          ************************************************/
   86          void SPI_Read_Nbytes(u8 addr, u8 *lqbuf, u16 lqsize)
   87          {
   88   1          SPI_CE_Low();                         //enable device
   89   1          SPI_WriteByte(addr);                  //设置起始地址
   90   1          lqbuf++;                              
   91   1          do{                                   
   92   2              *lqbuf = SPI_ReadByte();          //receive byte and store at lqbuf
   93   2              lqbuf++;                          
   94   2          }while(--lqsize);                     //read until no_bytes is reached
   95   1          SPI_CE_High();                        //disable device
   96   1      }
   97          
   98          /************************************************
   99          写数据到Flash中
  100          入口参数:
  101              addr   : 地址参数
  102              lqbuf : 缓冲需要写入Flash的数据
  103              lqsizee   : 数据块大小
  104          出口参数: 无
  105          ************************************************/
  106          void SPI_Write_Nbytes(u8 addr, u8 *lqbuf, u8 lqsize)
  107          {
  108   1      
  109   1          SPI_CE_Low();                         // enable device
  110   1          SPI_WriteByte(addr);                  // 发送页编程命令
  111   1          lqbuf++;                              
  112   1          do{                                   
  113   2              SPI_WriteByte(*lqbuf++);          //连续页内写
  114   2              addr++;                           
  115   2              if ((addr & 0xff) == 0) break;    
  116   2          }while(--lqsize);                     
  117   1          SPI_CE_High();                        // disable device
  118   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       164     ------
C251 COMPILER V5.60.0,  LQ_SPI                                                             21/12/21  22:07:37  PAGE 3   

  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------          4
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

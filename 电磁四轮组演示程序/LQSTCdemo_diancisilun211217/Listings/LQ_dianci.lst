C251 COMPILER V5.60.0,  LQ_dianci                                                          21/12/21  22:07:38  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE LQ_dianci
OBJECT MODULE PLACED IN .\Objects\LQ_dianci.obj
COMPILER INVOKED BY: D:\Keil_v5\C251\BIN\C251.EXE user\Dianci\LQ_dianci.c LARGE INTR2 BROWSE INCDIR(.\user;.\user\Dianci
                    -) DEBUG PRINT(.\Listings\LQ_dianci.lst) TABS(2) OBJECT(.\Objects\LQ_dianci.obj) 

stmt  level    source

    1          /*LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
    2          【平    台】北京龙邱智能科技STC16核心板
    3          【编    写】chiusir
    4          【E-mail  】chiusir@163.com
    5          【软件版本】V1.1 版权所有，单位使用请先联系授权
    6          【最后更新】2021年1月23日
    7          【相关信息参考下列地址】
    8          【网    站】http://www.lqist.cn
    9          【淘宝店铺】http://longqiu.taobao.com
   10          ------------------------------------------------
   11          【IDE】STC16
   12          【Target 】 C251Keil5.6及以上
   13          【SYS PLL】 30MHz使用内部晶振
   14          =================================================================
   15          STC16相关配套视频：
   16          龙邱科技B站网址：https://space.bilibili.com/95313236
   17          STC16环境下载参考视频： https://www.bilibili.com/video/BV1gy4y1p7T1/
   18          STC16一体板子介绍视频： https://www.bilibili.com/video/BV1Jy4y1e7R4/
   19          =================================================================
   20          下载时, 选择时钟 30MHZ (用户可自行修改频率).
   21          STC16F初次下载:先用IRCBND=0，ISP界面设置为24M，
   22          然后IRCBND=0，下载频率为30M；
   23          或者IRCBND=1，下载频率为30M；好用为准
   24          QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ*/
   25          #include "LQ_dianci.h"
   26          #include "include.h"
   27          short leftP=0,leftV=0,rightV=0,rightP=0;
   28          short TempAngle = 0;   
   29          short MotorDuty1=0;           // 定义左电机全局变量
   30          short MotorDuty2=0;           // 定义右电机全局变量
   31          
   32          short ECPULSE1 = 0;          // 定义左编码器全局变量 
   33          short ECPULSE2 = 0;          // 定义右编码器全局变量
   34          short MtTargetDuty =0;     // 电机PWM
   35          short Kp=10;
   36          short ServoDuty =0;
   37          
   38          
   39          
   40          void timer0_int (void) interrupt 1
   41          {
   42   1          ECPULSE1 = Read_Encoder(1);               // 左电机 母板上编码器1，小车前进为负值
   43   1          ECPULSE2 = Read_Encoder(2);               // 右电机 母板上编码器2，小车后退为正值
   44   1          Control();
   45   1          ServoCtrl(Servo_Center-TempAngle);
   46   1          MotorCtrl(MotorDuty1,MotorDuty2);
   47   1      }
   48          
   49          /*LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
   50          【函数名】void InductorNormal (void)
   51          【功  能】电磁车演示程序
   52          【作  者】chiusir
   53          【最后更新】2021年1月22日 
   54          【软件版本】V1.0
   55          QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ*/
   56          unsigned int data diangan[4];
   57          void InductorNormal (void)
   58          {
C251 COMPILER V5.60.0,  LQ_dianci                                                          21/12/21  22:07:38  PAGE 2   

   59   1          diangan[0]=ADC_Read(8);     // 读取ADC8通道值   P00
   60   1          diangan[1]=ADC_Read(9);     // 读取ADC9通道值   P01
   61   1          diangan[2]=ADC_Read(10);    // 读取ADC10通道值  P02
   62   1          diangan[3]=ADC_Read(11);    // 读取ADC11通道值  P03
   63   1          
   64   1          leftP =  (float)(diangan[0] - 100.0) / (2300.0 - 100.0) * 100.0;    // 电感归一化
   65   1          leftV =  (float)(diangan[1] - 100.0) / (2300.0 - 100.0) * 100.0;    // 电感归一化
   66   1          rightV = (float)(diangan[2] - 100.0) / (2300.0 - 100.0) * 100.0;    // 电感归一化
   67   1          rightP = (float)(diangan[3] - 100.0) / (2300.0 - 100.0) * 100.0;    // 电感归一化     
   68   1          
   69   1          leftP = (leftP < 0) ? 0 : leftP;            //归一化后限制输出幅度
   70   1          leftP = (leftP > 100) ? 100 : leftP;        //归一化后限制输出幅度
   71   1          rightV = (rightV < 0) ? 0 : rightV;         //归一化后限制输出幅度
   72   1          rightV = (rightV > 100) ? 100 : rightV;     //归一化后限制输出幅度
   73   1          leftV = (leftV < 0) ? 0 : leftV;            //归一化后限制输出幅度
   74   1          leftV = (leftV > 100) ? 100 : leftV;        //归一化后限制输出幅度
   75   1          rightP = (rightP < 0) ? 0 : rightP;         //归一化后限制输出幅度
   76   1          rightP = (rightP > 100) ? 100 : rightP;     //归一化后限制输出幅度      
   77   1      }
   78          
   79          
   80          int16_t Last_ServoDuty = 0; // 记忆打脚
   81          int16_t M_error=0,Last_Target=0;      // 记忆速度
   82          int time = 0;
   83          
   84          int count = 1;             // 干航管触发计数
   85          int Fork = 0,Forking=0,Forkout=0;              // 三岔路标志
   86          int Round=0,Round_In=0,Rounding=0,Round_Out=0;
   87          int Detection_L=0,Fork_R=0,Detection_R=0,Fork_L=0;
   88          
   89          int RAllPulse=0;
   90          void Control(void)
   91          {
   92   1        InductorNormal();
   93   1            // 圆环处理
   94   1         if(Round==1)
   95   1          {
   96   2            // Target_Speed =30;
   97   2           //  Target_Speed = 50;
   98   2              Discern();
   99   2            
  100   2      
  101   2          }
  102   1          // 三岔路口处理 第一圈右侧 第二圈左侧
  103   1         ////////////右岔路//////////
  104   1          else if(Fork == 1&&count==0&&Round==0&&Fork_R==0)  // 右岔路
  105   1          {
  106   2              TempAngle = -150;
  107   2             // Target_Speed = 40;
  108   2              Fork_R = 1;
  109   2            MtTargetDuty =150;
  110   2      
  111   2          }
  112   1          else if(rightP<5&&leftP<5&&Fork_R==1&&Forking==0)  // 判断在岔路中
  113   1         {
  114   2              Forking=1;
  115   2         }
  116   1      
  117   1          else if(Forking==1&&Forkout==0&&Fork_R==1)        // 岔路中循迹
  118   1          {
  119   2              TempAngle=(leftV-rightV)*220/(leftV+rightV);
  120   2             // Target_Speed = 40;
  121   2              MtTargetDuty =150;
  122   2      
  123   2                 if(leftP>18&&leftV>18)                     // 判断岔路出口
  124   2                  {
C251 COMPILER V5.60.0,  LQ_dianci                                                          21/12/21  22:07:38  PAGE 3   

  125   3                      Forkout=1;
  126   3                      RAllPulse = 0;
  127   3                    MtTargetDuty =180;
  128   3                  }
  129   2          }
  130   1          else if(Forking==1&&Forkout==1&&Fork_R==1)  //出岔路 清除标志位
  131   1          {
  132   2              TempAngle=(leftV-rightV)*220/(leftV+rightV);
  133   2              MtTargetDuty =180;
  134   2      
  135   2                  Fork = 0;
  136   2                  Fork_R=0;
  137   2                  Forking=0;
  138   2                  Forkout=0;
  139   2      
  140   2          }
  141   1      
  142   1             ///////////// 左岔路///////
  143   1          else if(Fork == 1&&count==1&&Round==0&&Fork_L==0)  // 左岔路
  144   1          {
  145   2              TempAngle = 180;
  146   2             // Target_Speed = 20;
  147   2              Fork_L = 1;
  148   2          }
  149   1      
  150   1          else if(rightP<5&&leftP<5&&Fork_L==1&&Forking==0) // 判断在岔路中
  151   1            {
  152   2                 Forking=1;
  153   2            }
  154   1      
  155   1          else if(Forking==1&&Forkout==0&&Fork_L==1)// 岔路中循迹
  156   1            {
  157   2                TempAngle=(leftV-rightV)*200/(leftV+rightV);
  158   2              //  Target_Speed = 20;
  159   2              MtTargetDuty =180;
  160   2                 if(rightV>18&&rightP>18)   // 判断岔路出口
  161   2                    {
  162   3                        Forkout=1;
  163   3                        RAllPulse = 0;
  164   3                    }
  165   2      
  166   2            }
  167   1             else if(Forking==1&&Forkout==1&&Fork_L==1) //出岔路 清除标志位
  168   1             {
  169   2                 TempAngle=(leftV-rightV)*200/(leftV+rightV);
  170   2                 MtTargetDuty =180;
  171   2                     Fork = 0;
  172   2                     Fork_R=0;
  173   2                     Fork_L=0;
  174   2                     Forking=0;
  175   2                     Forkout=0;
  176   2                     count=0;
  177   2             }
  178   1      
  179   1           //正常循迹
  180   1         else
  181   1         {
  182   2                  // 圆环识别
  183   2             if((Detection_L==0)&&(leftV>90)&&(rightV>80)&&(leftP<25))    //左环判断
  184   2             {
  185   3      
  186   3                 Detection_L=1;
  187   3                 
  188   3               //  Target_Speed = 0;
  189   3             }
  190   2             else if(leftV>92&&rightV>70&&Round==0&&Detection_L==1&&(leftP>45)) //左环进
C251 COMPILER V5.60.0,  LQ_dianci                                                          21/12/21  22:07:38  PAGE 4   

  191   2             {
  192   3                 Round = 1;
  193   3                 Round_In = 1;
  194   3                  
  195   3      
  196   3             }
  197   2                  // 三岔路口识别
  198   2                //  
  199   2            else if(leftP>15&&leftV<50&&rightV<50&&rightP>15&&Round==0&&Fork==0&&Forkout==0) //识别三岔路口
  200   2                  {
  201   3                      Fork = 1;
  202   3                      MtTargetDuty =100;
  203   3                  }
  204   2            else if(Round == 0&&Fork == 0)      // 正常循迹
  205   2                  {
  206   3                    if((leftV<5)&&(rightV<5))
  207   3                    {
  208   4                      MtTargetDuty = 0;
  209   4                    }
  210   3                    else if((leftV>15)&&(rightV>15))
  211   3                    {
  212   4                      TempAngle=(leftV-rightV)*140/(leftV+rightV);
  213   4                      MtTargetDuty = 250;
  214   4                    }
  215   3                    else 
  216   3                    {
  217   4                      TempAngle=(leftV-rightV)*330/(leftV+rightV);
  218   4                      MtTargetDuty =200;
  219   4                    }
  220   3                  }
  221   2          }
  222   1      
  223   1          // 电机闭环控制
  224   1      
  225   1        if(TempAngle>150)TempAngle=150;
  226   1        if(TempAngle<-150)TempAngle=-150;
  227   1        if(TempAngle<0)
  228   1        {
  229   2          MotorDuty1 = MtTargetDuty +TempAngle/2;
  230   2          MotorDuty2 = MtTargetDuty ; 
  231   2        }
  232   1          if(TempAngle>0)
  233   1        {
  234   2          MotorDuty1 = MtTargetDuty ;
  235   2          MotorDuty2 = MtTargetDuty-TempAngle/2 ; 
  236   2        }
  237   1      }
  238          
  239          
  240          void Discern(void) // 识别圆环 此圆环只写了左环 右环自己参考书写
  241          {
  242   1          if(Round_In==1)  // 进圆环
  243   1          {
  244   2              TempAngle=(leftP-rightP)*400/(leftP+rightP);  //切换垂直电感循迹
  245   2              MtTargetDuty =0;
  246   2          }
  247   1          if((rightP<20)&&(rightV<30)&&Round_In==1)         // 判断在圆环中
  248   1          {
  249   2      
  250   2              Rounding=1;
  251   2              Round_In=0;
  252   2          }
  253   1          else if(Rounding==1)                        // 圆环中循迹 切回水平电感循迹
  254   1          {
  255   2              TempAngle=(leftV-rightV)*200/(leftV+rightV);
  256   2              MtTargetDuty =200;
C251 COMPILER V5.60.0,  LQ_dianci                                                          21/12/21  22:07:38  PAGE 5   

  257   2          }
  258   1          if(Rounding==1&&((leftP>80&&leftV>80)))
  259   1          {
  260   2              Round_Out = 1;
  261   2              RAllPulse = 0;
  262   2          }
  263   1          if(Round_Out == 1)
  264   1          {
  265   2      
  266   2              TempAngle=(leftV-rightV)*280/(leftV+rightV);
  267   2              MtTargetDuty =220;
  268   2              if(leftP<60&&leftV<60)           // 出圆环 清楚标志位
  269   2              {
  270   3               
  271   3                  Round = 0;
  272   3                  Rounding=0;
  273   3                  Round_Out = 0;
  274   3                  RAllPulse = 0;
  275   3                  Detection_R=0;
  276   3              }
  277   2          }
  278   1      }
  279          
  280          
  281          
  282          
  283          
  284          
  285          
  286          /*LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
  287          【函数名】void OLED_show (void)
  288          【功  能】OLED显示函数
  289          【作  者】chiusir
  290          【最后更新】2021年12月22日 
  291          【软件版本】V1.0
  292          QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ*/
  293          void OLED_show(void)
  294          {
  295   1          char txt[30];
  296   1          sprintf(txt,"LP:%03d RP:%03d",leftP,rightP);    // 显示ADC8的值
  297   1          OLED_P6x8Str(0,0,(u8*)txt);
  298   1          sprintf(txt,"LV:%03d RV:%03d",leftV,rightV);    // 显示ADC9的值
  299   1          OLED_P6x8Str(0,1,(u8*)txt);
  300   1          sprintf(txt,"E:%04d %04d",ECPULSE1,ECPULSE2);   // 显示ADC11的值
  301   1          OLED_P6x8Str(0,2,(u8*)txt);
  302   1          sprintf(txt,"M:%04d Mt:%04d",MotorDuty1,MotorDuty2);  // 显示ADC11的值
  303   1          OLED_P6x8Str(0,3,(u8*)txt);
  304   1          sprintf(txt,"T:%04d",TempAngle);  // 显示ADC11的值
  305   1          OLED_P6x8Str(0,4,(u8*)txt);
  306   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      2239     ------
  ecode size           =    ------     ------
  data size            =         8     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =        58         30
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
C251 COMPILER V5.60.0,  LQ_dianci                                                          21/12/21  22:07:38  PAGE 6   

  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       269     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
